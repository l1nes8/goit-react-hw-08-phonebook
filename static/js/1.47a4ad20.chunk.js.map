{"version":3,"file":"static/js/1.47a4ad20.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","redux/contactsSelector.js","components/Contacts/ContactForm.js","components/Contacts/Filter.js","../node_modules/@chakra-ui/layout/src/list.tsx","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs","components/Contacts/ContactList.js","components/Contacts/Contact.js","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","export const selectContacts = state => state.contactsFilter.contacts.items;\nexport const selectIsLoading = state => state.contactsFilter.contacts.isLoading;\nexport const selectError = state => state.contactsFilter.contacts.error;\nexport const selectFilter = state => state.contactsFilter.filter;\n","import React, { useState } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport { FormLabel } from '@chakra-ui/react';\nimport css from 'form.module.css';\n\nexport default function ContactForm({ contacts, onAddContact }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    if (e.target.name === 'name') {\n      setName(e.target.value);\n    } else if (e.target.name === 'number') {\n      setNumber(e.target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') return;\n\n    const isDuplicate = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isDuplicate) {\n      alert(`${name} is already in contacts`);\n    } else {\n      onAddContact(name, number);\n      setName('');\n      setNumber('');\n    }\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormLabel>Name</FormLabel>\n      <Input\n        size=\"md\"\n        width=\"240px\"\n        variant=\"filled\"\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        onChange={handleChange}\n        placeholder=\"Name\"\n        required\n      />\n      <FormLabel>Phone</FormLabel>\n      <Input\n        size=\"md\"\n        width=\"240px\"\n        variant=\"filled\"\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        placeholder=\"Phone Number\"\n        required\n      />\n      <button type=\"submit\" className={css.addBtn}>\n        Add Contact\n      </button>\n    </form>\n  );\n}\n","import React from 'react';\nimport { Input } from '@chakra-ui/react';\n\nexport default function Filter({ filter, onFilterChange }) {\n  const handleChange = e => {\n    onFilterChange(e.target.value);\n  };\n\n  return (\n    <Input\n      size=\"md\"\n      width=\"240px\"\n      variant=\"filled\"\n      type=\"text\"\n      value={filter}\n      onChange={handleChange}\n      placeholder=\"Search contacts by name\"\n    />\n  );\n}\n","import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport type {\n  HTMLChakraProps,\n  SystemProps,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemStyleObject,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\n\nconst [ListStylesProvider, useListStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ListStylesContext`,\n  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<List />\" `,\n})\n\nexport { useListStyles }\n\ninterface ListOptions {\n  /**\n   * Shorthand prop for `listStyleType`\n   * @type SystemProps[\"listStyleType\"]\n   */\n  styleType?: SystemProps[\"listStyleType\"]\n  /**\n   * Shorthand prop for `listStylePosition`\n   * @type SystemProps[\"listStylePosition\"]\n   */\n  stylePosition?: SystemProps[\"listStylePosition\"]\n  /**\n   * The space between each list item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nexport interface ListProps\n  extends HTMLChakraProps<\"ul\">,\n    ThemingProps<\"List\">,\n    ListOptions {}\n\n/**\n * List is used to display list items, it renders a `<ul>` by default.\n *\n * @see Docs https://chakra-ui.com/list\n */\nexport const List = forwardRef<ListProps, \"ul\">(function List(props, ref) {\n  const styles = useMultiStyleConfig(\"List\", props)\n  const {\n    children,\n    styleType = \"none\",\n    stylePosition,\n    spacing,\n    ...rest\n  } = omitThemingProps(props)\n\n  const validChildren = getValidChildren(children)\n\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const spacingStyle = spacing ? { [selector]: { mt: spacing } } : {}\n\n  return (\n    <ListStylesProvider value={styles}>\n      <chakra.ul\n        ref={ref}\n        listStyleType={styleType}\n        listStylePosition={stylePosition}\n        /**\n         * We added this role to fix the Safari accessibility issue with list-style-type: none\n         * @see https://www.scottohara.me/blog/2019/01/12/lists-and-safari.html\n         */\n        role=\"list\"\n        __css={{ ...styles.container, ...spacingStyle }}\n        {...rest}\n      >\n        {validChildren}\n      </chakra.ul>\n    </ListStylesProvider>\n  )\n})\n\nList.displayName = \"List\"\n\nexport const OrderedList = forwardRef<ListProps, \"ol\">((props, ref) => {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ol\" styleType=\"decimal\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nOrderedList.displayName = \"OrderedList\"\n\nexport const UnorderedList = forwardRef<ListProps, \"ul\">(function UnorderedList(\n  props,\n  ref,\n) {\n  const { as, ...rest } = props\n  return (\n    <List ref={ref} as=\"ul\" styleType=\"initial\" marginStart=\"1em\" {...rest} />\n  )\n})\n\nUnorderedList.displayName = \"UnorderedList\"\n\nexport interface ListItemProps extends HTMLChakraProps<\"li\"> {}\n\n/**\n * ListItem\n *\n * Used to render a list item\n */\nexport const ListItem = forwardRef<ListItemProps, \"li\">(function ListItem(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <chakra.li ref={ref} {...props} __css={styles.item} />\n})\n\nListItem.displayName = \"ListItem\"\n\n/**\n * ListIcon\n *\n * Used to render an icon beside the list item text\n */\nexport const ListIcon = forwardRef<IconProps, \"svg\">(function ListIcon(\n  props,\n  ref,\n) {\n  const styles = useListStyles()\n\n  return <Icon ref={ref} role=\"presentation\" {...props} __css={styles.icon} />\n})\n\nListIcon.displayName = \"ListIcon\"\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n","import React from 'react';\nimport css from 'form.module.css';\nimport { ListItem, OrderedList } from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\n\nexport default function ContactList({ contacts, onDeleteContact }) {\n  return (\n    <div>\n      <OrderedList className={css.listContact}>\n        {contacts.map(contact => (\n          <ListItem className={css.item} key={contact.id}>\n            {contact.name}: {contact.number}\n            <Button\n              colorScheme=\"teal\"\n              size=\"xs\"\n              type=\"submit\"\n              onClick={() => onDeleteContact(contact.id)}\n              className={css.deleteContact}\n            >\n              Delete\n            </Button>\n          </ListItem>\n        ))}\n      </OrderedList>\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { RotatingLines } from 'react-loader-spinner';\nimport { FormLabel } from '@chakra-ui/react';\nimport { Text } from '@chakra-ui/react';\n\nimport {\n  fetchContacts,\n  addContacthContacts,\n  deleteContacts,\n  setFilter,\n} from 'redux/contactsReucer';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilter,\n} from 'redux/contactsSelector';\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\nimport ContactList from './ContactList';\n\nconst Contact = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleAddContact = (name, number) => {\n    const newContact = {\n      name,\n      number,\n    };\n\n    dispatch(addContacthContacts(newContact));\n  };\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContacts(contactId));\n  };\n\n  const handleFilterTerm = filter => {\n    dispatch(setFilter(filter));\n  };\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <div>\n      <Text fontSize=\"30px\" as=\"b\">\n        Phonebook\n      </Text>\n      <ContactForm onAddContact={handleAddContact} contacts={contacts} />\n      <FormLabel>Contacts</FormLabel>\n      {isLoading && (\n        <RotatingLines\n          strokeColor=\"grey\"\n          strokeWidth=\"5\"\n          animationDuration=\"0.75\"\n          width=\"96\"\n          visible={true}\n        />\n      )}\n      {error && <h1>{error}</h1>}\n      <Filter filter={filter} onFilterChange={handleFilterTerm} />\n      <ContactList\n        contacts={filteredContacts}\n        onDeleteContact={handleDeleteContact}\n      />\n    </div>\n  );\n};\n\nexport default Contact;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["props","forwardRef","styles","className","align","useStyleConfig","omitThemingProps","textAlign","decoration","casing","rest","aliasedProps","textDecoration","object","clone","Object","assign","key","compact","textTransform","p","__css","Text","chakra","cx","selectContacts","state","contactsFilter","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","ContactForm","onAddContact","useState","name","setName","number","setNumber","handleChange","e","target","value","onSubmit","preventDefault","trim","some","contact","toLowerCase","alert","currentTarget","reset","I","size","width","variant","type","onChange","placeholder","required","css","Filter","onFilterChange","createContext","errorMessage","ListStylesProvider","useListStyles","List","children","styleType","useMultiStyleConfig","stylePosition","spacing","validChildren","selector","spacingStyle","Children","child","isValidElement","getValidChildren","ul","listStyleType","role","container","displayName","OrderedList","as","marginStart","UnorderedList","ListItem","ListIcon","Icon","ContactList","onDeleteContact","map","colorScheme","onClick","id","dispatch","useDispatch","useSelector","useEffect","fetchContacts","filteredContacts","normalizedFilter","includes","getFilteredContacts","fontSize","newContact","addContacthContacts","strokeColor","strokeWidth","animationDuration","visible","setFilter","contactId","deleteContacts","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","field","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","display","ref","FormLabel","isRequired","useFormControlStyles","span","getRequiredIndicatorProps","FormControlStylesProvider","strict","FormControlProvider","useFormControlProvider","idProp","context","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","onFocus","onBlur","FormControl","div","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","push","disabled","join","_b","_c","useFormControl","callAllHandlers","htmlSize","input","Input"],"sourceRoot":""}